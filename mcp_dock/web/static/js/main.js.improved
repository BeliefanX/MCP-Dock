/**
 * MCP 统一管理工具 WebUI 交互脚本
 */

// 全局Toast函数，兼容所有调用
function showToast(type, message) {
    $('#toastMessage').text(message);
    $('#toast').removeClass('bg-success bg-danger bg-info bg-warning');
    if (type === 'success') $('#toast').addClass('bg-success');
    else if (type === 'danger') $('#toast').addClass('bg-danger');
    else if (type === 'info') $('#toast').addClass('bg-info');
    else if (type === 'warning') $('#toast').addClass('bg-warning');
    const toast = new bootstrap.Toast(document.getElementById('toast'));
    toast.show();
}

$(document).ready(function() {
    console.log('文档已加载完成，初始化MCP管理界面...');
    
    // 调试页面结构
    function debugPageStructure() {
        console.log('======== 页面结构调试信息 ========');
        console.log('导航链接:');
        $('.nav-link').each(function(i) {
            console.log(`  [${i}] 文本="${$(this).text().trim()}", target="${$(this).data('bs-target')}", class="${$(this).attr('class')}"`);
        });
        
        console.log('标签内容区域:');
        $('.tab-pane').each(function(i) {
            console.log(`  [${i}] id="${$(this).attr('id')}", class="${$(this).attr('class')}", 可见=${$(this).is(':visible')}`);
        });
        
        console.log('添加按钮:');
        console.log(`  #addServerBtn 存在=${$('#addServerBtn').length > 0}, 可见=${$('#addServerBtn').is(':visible')}`);
        console.log(`  #addProxyBtn 存在=${$('#addProxyBtn').length > 0}, 可见=${$('#addProxyBtn').is(':visible')}`);
        
        console.log('表格容器:');
        console.log(`  #serversList 存在=${$('#serversList').length > 0}`);
        console.log(`  #proxiesList 存在=${$('#proxiesList').length > 0}`);
        console.log('===================================');
    }
    
    // 调用调试函数
    debugPageStructure();
    
    // 强制切换到代理标签按钮
    $('#debugForceProxyTabBtn').click(function() {
        console.log('强制切换到代理标签按钮被点击');
        
        // 首先直接测试API端点
        console.log('直接测试代理API端点...');
        $.ajax({
            url: '/api/proxy/',
            type: 'GET',
            cache: false,
            dataType: 'json',
            success: function(response) {
                console.log('API测试成功，Response:', response);
                showToast('success', '代理API端点测试成功');
            },
            error: function(xhr, status, error) {
                console.error('API测试失败:', xhr.responseText, status, error);
                console.error('状态码:', xhr.status);
                console.error('Response头:', xhr.getAllResponseHeaders());
                showToast('danger', `代理API端点测试失败: ${xhr.status} ${error}`);
            }
        });
        
        // 获取代理标签导航链接并强制点击
        const $proxyNavLink = $('.nav-link').filter(function() {
            return $(this).data('bs-target') === '#proxiesTab';
        });
        
        if ($proxyNavLink.length) {
            console.log('找到代理标签导航链接，强制点击');
            $proxyNavLink.tab('show');
            
            // 手动加载代理列表
            console.log('手动加载代理列表');
            loadProxiesList();
            
            // 切换按钮可见性
            $('.show-in-servers-tab').hide();
            $('.show-in-proxies-tab').show();
            
            // 检查标签页和列表状态
            console.log('检查代理标签页的DOM状态:');
            console.log('  #proxiesTab DOM元素:', document.getElementById('proxiesTab'));
            console.log('  #proxiesList DOM元素:', document.getElementById('proxiesList'));
            
            // 输出当前标签状态
            setTimeout(function() {
                console.log('标签切换后状态：');
                console.log('  #serversTab 可见=', $('#serversTab').is(':visible'));
                console.log('  #proxiesTab 可见=', $('#proxiesTab').is(':visible'));
                console.log('  #serversTab class=', $('#serversTab').attr('class'));
                console.log('  #proxiesTab class=', $('#proxiesTab').attr('class'));
                
                // 如果代理标签页不可见，强制显示
                if (!$('#proxiesTab').is(':visible')) {
                    console.log('代理标签页不可见，尝试强制显示');
                    $('#proxiesTab').addClass('show active');
                    $('#serversTab').removeClass('show active');
                    // 重新加载代理列表
                    loadProxiesList();
                }
            }, 500);
        } else {
            console.error('未找到代理标签导航链接');
        }
    });
    
    // 直接监听导航标签的点击事件
    $('.nav-link').click(function() {
        console.log('导航链接被点击:', $(this).text().trim());
        console.log('  目标:', $(this).data('bs-target'));
        console.log('  当前class:', $(this).attr('class'));
    });
    
    // 模态框对象
    const addServerModal = new bootstrap.Modal(document.getElementById('addServerModal'));
    const editServerModal = new bootstrap.Modal(document.getElementById('editServerModal'));
    const importConfigModal = new bootstrap.Modal(document.getElementById('importConfigModal'));
    const addProxyModal = new bootstrap.Modal(document.getElementById('addProxyModal'));
    const editProxyModal = new bootstrap.Modal(document.getElementById('editProxyModal'));
    
    // Toast 通知对象
    const toast = new bootstrap.Toast(document.getElementById('toast'));
    
    // 加载服务器列表
    loadServersList();
    console.log('初始加载服务列表...');
    
    // 加载代理列表
    loadProxiesList();
    console.log('初始加载代理列表...');
    
    // 标签切换事件
    $('a[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
        const target = $(e.target).data('bs-target');
        console.log('标签切换事件触发，目标：', target);
        
        if (target === '#serversTab') {
            console.log('切换到服务器标签，加载服务列表...');
            loadServersList();
            $('.show-in-servers-tab').show();
            $('.show-in-proxies-tab').hide();
        } else if (target === '#proxiesTab') {
            console.log('切换到代理标签，加载代理列表...');
            // 确保代理标签页是可见的
            $('#proxiesTab').addClass('show active');
            // 延迟一点加载，确保DOM已经更新
            setTimeout(function() {
                console.log('尝试加载代理列表 (延迟执行)');
                loadProxiesList();
                // 确保按钮可见性正确
                $('.show-in-servers-tab').hide();
                $('.show-in-proxies-tab').show();
            }, 100);
        } else {
            console.log('切换到未知标签:', target);
        }
    });
    
    // 初始状态设置
    $('.show-in-servers-tab').show();
    $('.show-in-proxies-tab').hide();
    
    // 显示添加服务器模态框
    $('#addServerBtn').click(function() {
        // 重置表单
        $('#addServerForm')[0].reset();
        addServerModal.show();
    });
    
    // 显示添加代理模态框
    $('#addProxyBtn').click(function() {
        console.log('添加代理按钮被点击');
        // 重置表单
        $('#addProxyForm')[0].reset();
        
        console.log('正在加载可用服务列表...');
        // 加载可用服务列表
        $.ajax({
            url: '/api/servers',
            type: 'GET',
            cache: false,
            dataType: 'json',
            success: function(response) {
                console.log('获取服务列表成功:', response);
                const $serverSelect = $('#proxyServerName');
                $serverSelect.empty();
                
                // 添加"请选择"选项
                $serverSelect.append($('<option>').val('').text('请选择源服务...'));
                
                // 添加可用的服务
                if (response && Array.isArray(response)) {
                    response.forEach(function(server) {
                        const option = $('<option>')
                            .val(server.name)
                            .text(server.name);
                        $serverSelect.append(option);
                    });
                }
                
                // 显示模态框
                console.log('显示添加代理模态框');
                const addProxyModal = new bootstrap.Modal(document.getElementById('addProxyModal'));
                addProxyModal.show();
            },
            error: function(xhr) {
                console.error('获取服务列表失败:', xhr.responseText);
                showToast('danger', '获取可用服务列表失败，请刷新后重试');
            }
        });
    });
    
    // 类型切换动态显示/隐藏字段
    function updateServerFormFields() {
        const type = $('#transportType').val();
        if (type === 'stdio') {
            $('#stdioFields').show();
            $('#httpFields').hide();
        } else {
            $('#stdioFields').hide();
            $('#httpFields').show();
        }
    }
    $('#transportType').on('change', updateServerFormFields);
    updateServerFormFields();
    
    // 编辑服务器模态框类型切换
    function updateEditServerFormFields() {
        const type = $('#editTransportType').val();
        if (type === 'stdio') {
            $('#editStdioFields').show();
            $('#editHttpFields').hide();
        } else {
            $('#editStdioFields').hide();
            $('#editHttpFields').show();
        }
    }
    $('#editTransportType').on('change', updateEditServerFormFields);
    updateEditServerFormFields();
    
    // 保存按钮处理
    $('#saveServerBtn').off('click').on('click', function() {
        const type = $('#transportType').val();
        const formData = new FormData();
        formData.append('name', $('#serverName').val());
        formData.append('desc', $('#serverDesc').val());
        formData.append('transport_type', type);
        if (type === 'stdio') {
            formData.append('command', $('#command').val());
            // 参数
            const argsArr = $('#args').val().split('\n').map(s => s.trim()).filter(Boolean);
            formData.append('args', JSON.stringify(argsArr));
            // 环境变量
            const envLines = $('#env').val().split('\n').map(s => s.trim()).filter(Boolean);
            const envObj = {};
            envLines.forEach(line => {
                const idx = line.indexOf('=');
                if (idx > 0) envObj[line.slice(0, idx)] = line.slice(idx + 1);
            });
            formData.append('env', JSON.stringify(envObj));
            formData.append('url', '');
            formData.append('headers', '');
        } else {
            formData.append('command', '');
            formData.append('args', '[]');
            formData.append('env', '{}');
            formData.append('url', $('#url').val());
            // headers
            const headerLines = $('#headers').val().split('\n').map(s => s.trim()).filter(Boolean);
            const headersObj = {};
            headerLines.forEach(line => {
                const idx = line.indexOf('=');
                if (idx > 0) headersObj[line.slice(0, idx)] = line.slice(idx + 1);
            });
            formData.append('headers', JSON.stringify(headersObj));
        }
        // 校验
        if (!$('#serverName').val()) {
            showToast('danger', '名称为必填项');
            $('#serverName').focus();
            return;
        }
        if (type === 'stdio' && !$('#command').val()) {
            showToast('danger', '命令为必填项');
            $('#command').focus();
            return;
        }
        if ((type === 'sse' || type === 'streamableHTTP') && !$('#url').val()) {
            showToast('danger', 'URL为必填项');
            $('#url').focus();
            return;
        }
        $.ajax({
            url: '/api/servers',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                addServerModal.hide();
                showToast('success', response.message);
                loadServersList();
            },
            error: function(xhr) {
                let errorMsg = '添加服务器失败';
                if (xhr.responseJSON && xhr.responseJSON.detail) {
                    errorMsg += ': ' + xhr.responseJSON.detail;
                }
                showToast('danger', errorMsg);
            }
        });
    });
    
    // 编辑服务器
    $(document).on('click', '.edit-server-btn', function() {
        const serverName = $(this).data('server');
        console.log('编辑MCP服务:', serverName);
        
        // 显示加载指示器
        const $btn = $(this);
        const originalHtml = $btn.html();
        $btn.prop('disabled', true);
        $btn.html('<i class="fas fa-spinner fa-spin"></i>');
        
        // 获取服务器信息并填充表单
        $.ajax({
            url: `/api/servers/${serverName}`,
            type: 'GET',
            success: function(server) {
                // 重置按钮状态
                $btn.html(originalHtml);
                $btn.prop('disabled', false);
                
                console.log('成功获取服务器信息:', server);
                
                // 填充基本字段
                $('#editServerOriginalName').val(server.name);
                $('#editServerName').val(server.name);
                $('#editCommand').val(server.command);
                $('#editArgs').val(JSON.stringify(server.args || []));
                
                // 使用直接获取的服务器信息填充其他字段
                $('#editEnv').val(JSON.stringify(server.env || {}));
                $('#editCwd').val(server.cwd || '');
                $('#editTransportType').val(server.transport_type || 'stdio').trigger('change');
                $('#editPort').val(server.port || '');
                $('#editUrl').val(server.url || '');
                $('#editHeaders').val(
                  server.headers && Object.keys(server.headers).length > 0
                    ? JSON.stringify(server.headers, null, 2)
                    : ''
                );
                
                // 显示模态框
                editServerModal.show();
            },
            error: function(xhr) {
                // 重置按钮状态
                $btn.html(originalHtml);
                $btn.prop('disabled', false);
                
                console.error('获取服务器信息失败:', xhr.responseText);
                showToast('danger', '获取服务器信息失败');
            }
        });
    });
    
    // 提交更新服务器表单
    $('#updateServerBtn').click(function() {
        const originalName = $('#editServerOriginalName').val();
        
        // 禁用按钮防止重复提交
        const $btn = $(this);
        const originalHtml = $btn.html();
        $btn.prop('disabled', true);
        $btn.html('<i class="fas fa-spinner fa-spin"></i> 更新中...');
        
        try {
            // 接收环境变量字段，预先检查是否是有效JSON
            const envText = $('#editEnv').val().trim();
            if (envText) {
                try {
                    // 验证JSON格式
                    JSON.parse(envText);
                } catch(e) {
                    showToast('danger', '环境变量不是有效的JSON格式: ' + e.message);
                    $btn.prop('disabled', false);
                    $btn.html(originalHtml);
                    return;
                }
            }
            
            // 接收参数字段，预先检查是否是有效JSON
            const argsText = $('#editArgs').val().trim();
            let argsArray = [];
            if (argsText) {
                try {
                    // 先尝试 JSON 解析
                    argsArray = JSON.parse(argsText);
                    if (!Array.isArray(argsArray)) throw new Error('参数不是数组');
                } catch(e) {
                    // 尝试多行或空格分割
                    if (argsText.includes('\n')) {
                        argsArray = argsText.split('\n').map(s => s.trim()).filter(Boolean);
                    } else if (argsText.includes(' ')) {
                        argsArray = argsText.split(' ').map(s => s.trim()).filter(Boolean);
                    } else if (argsText.length > 0) {
                        argsArray = [argsText];
                    } else {
                        showToast('danger', '参数不能为空');
                        $btn.prop('disabled', false);
                        $btn.html(originalHtml);
                        return;
                    }
                }
            }
            // 用 JSON 字符串传给后端
            $('#editArgs').val(JSON.stringify(argsArray));
        
            // 使用FormData收集表单数据
            const formData = new FormData($('#editServerForm')[0]);
            
            // 打印调试信息
            console.log('发送更新请求，服务名称:', originalName);
            console.log('环境变量:', envText);
            console.log('参数:', argsText);
            
            $.ajax({
                url: `/api/servers/${originalName}`,
                type: 'PUT',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    // 恢复按钮状态
                    $btn.prop('disabled', false);
                    $btn.html(originalHtml);
                    
                    editServerModal.hide();
                    showToast('success', response.message);
                    loadServersList();
                },
                error: function(xhr, status, error) {
                    // 恢复按钮状态
                    $btn.prop('disabled', false);
                    $btn.html(originalHtml);
                    
                    console.error('更新失败:', xhr.responseText);
                    let errorMsg = 'Failed to update server';
                    try {
                        const resp = JSON.parse(xhr.responseText);
                        errorMsg = resp.detail || errorMsg;
                    } catch(e) {
                        if (xhr.responseJSON && xhr.responseJSON.detail) {
                            errorMsg += ': ' + xhr.responseJSON.detail;
                        } else {
                            errorMsg += ': ' + error;
                        }
                    }
                    showToast('danger', errorMsg);
                }
            });
        } catch (e) {
            // 恢复按钮状态
            $btn.prop('disabled', false);
            $btn.html(originalHtml);
            
            console.error('表单处理异常:', e);
            showToast('danger', '表单提交异常: ' + e.message);
        }
    });
    
    // 删除服务器
    $(document).on('click', '.delete-server-btn', function() {
        const serverName = $(this).data('server');
        const $btn = $(this);
        $btn.prop('disabled', true);
        $btn.html('<i class="fas fa-spinner fa-spin"></i>');
        if (confirm(`确定要删除服务器 "${serverName}" 吗？`)) {
            $.ajax({
                url: `/api/servers/${serverName}`,
                type: 'DELETE',
                success: function(response) {
                    showToast('success', response.message);
                    loadServersList();
                },
                error: function(xhr) {
                    let errorMsg = '删除服务器失败';
                    if (xhr.responseJSON && xhr.responseJSON.detail) {
                        errorMsg += ': ' + xhr.responseJSON.detail;
                    }
                    showToast('danger', errorMsg);
                    $btn.prop('disabled', false);
                    $btn.html('<i class="fas fa-trash"></i> 删除');
                    loadServersList();
                }
            });
        } else {
            $btn.prop('disabled', false);
            $btn.html('<i class="fas fa-trash"></i> 删除');
        }
    });
    
    // 启动服务器
    $(document).on('click', '.start-server-btn', function() {
        const serverName = $(this).data('server');
        const $btn = $(this);
        $btn.prop('disabled', true);
        $btn.html('<i class="fas fa-spinner fa-spin"></i>');
        $.ajax({
            url: `/api/servers/${serverName}/start`,
            type: 'POST',
            success: function(response) {
                showToast('success', response.message);
                loadServersList();
            },
            error: function(xhr) {
                let errorMsg = '启动服务器失败';
                if (xhr.responseJSON && xhr.responseJSON.detail) {
                    errorMsg += ': ' + xhr.responseJSON.detail;
                }
                showToast('danger', errorMsg);
                $btn.prop('disabled', false);
                $btn.html('<i class="fas fa-play"></i>');
                loadServersList();
            }
        });
    });
    
    // 验证MCP服务
    function verifyMcpServer(serverName, retry = true) {
        showToast('info', `正在获取 ${serverName} 服务的工具列表...`);
        $.ajax({
            url: `/api/servers/${serverName}/verify`,
            type: 'POST',
            success: function(response) {
                showToast('success', `服务 ${serverName} 获取工具列表成功，共有 ${response.tools.length} 个工具`);
                loadServersList();
            },
            error: function(xhr) {
                let errorMsg = `服务 ${serverName} 获取工具列表未完成，可能需要更多时间启动`;
                if (xhr.responseJSON && xhr.responseJSON.detail) {
                    errorMsg += ': ' + xhr.responseJSON.detail;
                }
                showToast('warning', errorMsg);
                loadServersList();
                if (retry) {
                    setTimeout(function() {
                        verifyMcpServer(serverName, true);
                    }, 5000);
                }
            }
        });
    }
    
    // 手动验证按钮点击事件
    $(document).on('click', '.verify-server-btn', function() {
        const serverName = $(this).data('server');
        const $btn = $(this);
        
        // 显示加载状态
        $btn.prop('disabled', true);
        $btn.html('<i class="fas fa-spinner fa-spin"></i>');
        
        // 调用验证函数，但不进行自动重试
        verifyMcpServer(serverName, false);
        
        // 1秒后恢复按钮样式
        setTimeout(function() {
            $btn.prop('disabled', false);
            $btn.html('<i class="fas fa-list"></i> 获取列表');
        }, 1000);
    });
    
    // 停止服务器
    $(document).on('click', '.stop-server-btn', function() {
        const serverName = $(this).data('server');
        const $btn = $(this);
        $btn.prop('disabled', true);
        $btn.html('<i class="fas fa-spinner fa-spin"></i>');
        $.ajax({
            url: `/api/servers/${serverName}/stop`,
            type: 'POST',
            success: function(response) {
                showToast('success', response.message);
                loadServersList();
            },
            error: function(xhr) {
                let errorMsg = '停止服务器失败';
                if (xhr.responseJSON && xhr.responseJSON.detail) {
                    errorMsg += ': ' + xhr.responseJSON.detail;
                }
                showToast('danger', errorMsg);
                $btn.prop('disabled', false);
                $btn.html('<i class="fas fa-stop"></i> 停止');
                loadServersList();
            }
        });
    });
    
    // 重启服务器
    $(document).on('click', '.restart-server-btn', function() {
        const serverName = $(this).data('server');
        const $btn = $(this);
        $btn.prop('disabled', true);
        $btn.html('<i class="fas fa-spinner fa-spin"></i>');
        $.ajax({
            url: `/api/servers/${serverName}/restart`,
            type: 'POST',
            success: function(response) {
                showToast('success', response.message);
                loadServersList();
            },
            error: function(xhr) {
                let errorMsg = '重启服务器失败';
                if (xhr.responseJSON && xhr.responseJSON.detail) {
                    errorMsg += ': ' + xhr.responseJSON.detail;
                }
                showToast('danger', errorMsg);
                $btn.prop('disabled', false);
                $btn.html('<i class="fas fa-sync-alt"></i> 重启');
                loadServersList();
            }
        });
    });
    
    // 显示导入配置模态框
    $('#importConfigBtn').click(function() {
        // 重置表单
        $('#importConfigForm')[0].reset();
        importConfigModal.show();
    });
    
    // 提交导入配置表单
    $('#importConfigSubmitBtn').click(function() {
        const formData = new FormData($('#importConfigForm')[0]);
        
        $.ajax({
            url: '/api/import',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                importConfigModal.hide();

                // 构建详细的成功消息
                let message = response.message || '导入完成';

                // 如果有路径标准化，添加提示
                if (response.path_normalized && response.path_normalized.length > 0) {
                    message += `\n\n路径已自动标准化的服务: ${response.path_normalized.join(', ')}`;
                    message += '\n这些服务的绝对路径已转换为相对路径，提高跨平台兼容性。';
                }

                // 如果有导入的服务列表，显示详情
                if (response.imported_servers && response.imported_servers.length > 0) {
                    message += `\n\n新导入的服务: ${response.imported_servers.join(', ')}`;
                }

                showToast('success', message);
                loadServersList();
            },
            error: function(xhr) {
                let errorMsg = '导入配置失败';
                if (xhr.responseJSON && xhr.responseJSON.detail) {
                    errorMsg += ': ' + xhr.responseJSON.detail;
                }
                showToast('danger', errorMsg);
            }
        });
    });
    
    /**
     * 加载服务器列表
     */
    function loadServersList() {
        console.log('开始加载 MCP 服务列表...');
        
        // 清空服务器列表并显示加载状态
        const $serversList = $('#serversList');
        $serversList.html(`
            <tr>
                <td colspan="6" class="text-center">
                    <div class="py-3">
                        <div class="spinner-border text-primary mb-2" role="status">
                            <span class="visually-hidden">正在加载...</span>
                        </div>
                        <p class="mb-0">正在加载 MCP 服务列表...</p>
                    </div>
                </td>
            </tr>
        `);
        
        // 请求服务列表数据
        $.ajax({
            url: '/api/servers',
            type: 'GET',
            cache: false,
            dataType: 'json',
            success: function(response) {
                console.log('获取到服务列表数据:', response);
                $serversList.empty();
                
                                    // 如果没有服务，显示空消息
                if (!response || !Array.isArray(response) || response.length === 0) {
                    $serversList.html(`
                        <tr>
                            <td colspan="6" class="text-center">
                                <div class="py-3">
                                    <i class="fas fa-server text-muted mb-2" style="font-size: 2rem;"></i>
                                    <p class="mb-0">暂无 MCP 服务，请点击右上角按钮添加</p>
                                </div>
                            </td>
                        </tr>
                    `);
                    return;
                }
                
                // 按服务名称对服务进行排序
                response.sort((a, b) => a.name.localeCompare(b.name));
                
                // 添加服务到表格
                response.forEach(function(server) {
                    // 获取运行状态
                    let statusText = '未知';
                    let statusClass = 'bg-secondary';
                    
                    // 状态描述转换
                    switch(server.status) {
                        case 'running':
                            statusText = '运行中';
                            statusClass = 'bg-success';
                            break;
                        case 'stopped':
                            statusText = '已停止';
                            statusClass = 'bg-secondary';
                            break;
                        case 'error':
                            statusText = '错误';
                            statusClass = 'bg-danger';
                            break;
                        case 'verified':
                            statusText = '已验证';
                            statusClass = 'bg-info';
                            break;
                    }
                    
                    // 准备操作列按钮
                    let actionsHtml = `
                        <div class="btn-group btn-group-sm">
                    `;
                    
                    // 根据状态显示不同的操作按钮
                    if (server.status === 'running' || server.status === 'verified') {
                        // 如果正在运行，显示验证按钮
                        if (server.status === 'running') {
                            actionsHtml += `
                                <button class="btn btn-outline-danger stop-server-btn" data-server="${server.name}">
                                    <i class="fas fa-stop"></i> 停止
                                </button>
                            `;
                        } else {
                            actionsHtml += `
                                <button class="btn btn-outline-danger stop-server-btn" data-server="${server.name}">
                                    <i class="fas fa-stop"></i> 停止
                                </button>
                            `;
                        }
                    } else {
                        actionsHtml += `
                            <button class="btn btn-outline-primary start-server-btn" data-server="${server.name}">
                                <i class="fas fa-play"></i> 启动
                            </button>
                        `;
                    }
                    
                    // 添加编辑和删除按钮 (不论状态如何都显示)
                    actionsHtml += `
                        <button class="btn btn-outline-secondary edit-server-btn" data-server="${server.name}">
                            <i class="fas fa-edit"></i> 编辑
                        </button>
                        <button class="btn btn-outline-danger delete-server-btn" data-server="${server.name}">
                            <i class="fas fa-trash"></i> 删除
                        </button>
                    `;
                    
                    actionsHtml += '</div>';
                    
                    // 建立工具模态框内容
                    let toolsHtml = '';
                    
                    if (server.tools && server.tools.length > 0) {
                        const modalId = `toolsModal_${server.name.replace(/[^a-zA-Z0-9]/g, '')}`;
                        
                        toolsHtml += `
                            <button class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#${modalId}">
                                <i class="fas fa-tools"></i> 查看 ${server.tools.length} 个工具
                            </button>
                            
                            <div class="modal fade" id="${modalId}" tabindex="-1" aria-hidden="true">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header bg-secondary text-white">
                                            <h5 class="modal-title">${server.name} 的工具列表</h5>
                                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="table-responsive">
                                                <table class="table table-sm table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 30%">工具名称</th>
                                                            <th>描述</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                        `;
                        
                        server.tools.forEach(tool => {
                            toolsHtml += `
                                                        <tr>
                                                            <td><code>${tool.name}</code></td>
                                                            <td>${tool.description || '<em>无描述</em>'}</td>
                                                        </tr>
                            `;
                        });
                        
                        toolsHtml += `
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                    } else if (server.status === 'running') {
                        // 只有当没有工具列表且服务在运行时，才显示获取列表按钮
                        toolsHtml += `
                            <button class="btn btn-sm btn-outline-success verify-server-btn" data-server="${server.name}">
                                <i class="fas fa-list"></i> 获取列表
                            </button>
                        `;
                    }
                    
                    // 添加行
                    $serversList.append(`
                        <tr>
                            <td>${server.name}</td>
                            <td>
                                <span class="d-inline-block text-truncate" style="max-width: 200px;" title="${server.command}">
                                    ${server.command}
                                </span>
                            </td>
                            <td>
                                <span class="badge rounded-pill bg-${server.transport_type === 'stdio' ? 'primary' : 'success'}">
                                    ${server.transport_type}
                                </span>
                            </td>
                            <td>
                                <span class="badge ${statusClass} bg-opacity-75">${statusText}</span>
                            </td>
                            <td>${toolsHtml}</td>
                            <td>${actionsHtml}</td>
                        </tr>
                    `);
                });
            },
            error: function(xhr, status, error) {
                console.error('加载服务列表失败:', xhr, status, error);
                
                // 显示错误信息并添加刷新按钮
                $('#serversList').html(`
                    <tr>
                        <td colspan="6" class="text-center">
                            <div class="py-3">
                                <p class="text-danger mb-2">加载 MCP 服务列表失败</p>
                                <button class="btn btn-sm btn-primary refresh-list-btn">
                                    <i class="fas fa-sync-alt me-1"></i>重新加载
                                </button>
                            </div>
                        </td>
                    </tr>
                `);
                
                // 为刷新按钮添加点击事件
                $('.refresh-list-btn').click(function() {
                    loadServersList();
                });
            }
        });
    }
    
    /**
     * 辅助函数: 查找服务器实例 (异步请求)
     * @param {string} name - 服务器名称
     * @param {function} callback - 当服务器信息获取到时调用的回调函数
     */
    function findServerInstance(name, callback) {
        $.ajax({
            url: `/api/servers/${name}`,
            type: 'GET',
            success: function(server) {
                if (callback && typeof callback === 'function') {
                    callback(server);
                }
            },
            error: function(xhr) {
                console.error('获取服务器信息失败:', xhr.responseText);
                if (callback && typeof callback === 'function') {
                    callback(null);
                }
            }
        });
    }
    
    /**
     * 根据状态代码获取可读状态文本
     */
    function getStatusText(status) {
        switch (status) {
            case 'running':
                return '运行中';
            case 'stopped':
                return '已停止';
            case 'error':
                return '错误';
            case 'verified':
                return '已验证';
            default:
                return '未知';
        }
    }

    // 智能交互：根据传输类型动态提示必填项和说明
    $('#transportType').on('change', function() {
        const type = $(this).val();
        let hint = '';
        if (type === 'stdio') {
            hint = '<b>stdio：</b> 只需填写命令、参数、环境变量、工作目录。适用于本地MCP服务。';
        } else if (type === 'sse') {
            hint = '<b>SSE：</b> 只需填写命令、参数、环境变量、工作目录。适用于远程SSE MCP服务。';
        } else {
            hint = '<b>streamableHTTP：</b> 只需填写命令、参数、环境变量、工作目录。适用于远程HTTP类MCP服务。';
        }
        $('#transportTypeHint').html(hint);
    });
    $('#transportType').trigger('change');

    // 编辑服务模态框也支持动态说明
    $('#editTransportType').on('change', function() {
        const type = $(this).val();
        let hint = '';
        if (type === 'stdio') {
            hint = '<b>stdio：</b> 只需填写命令、参数、环境变量、工作目录。适用于本地MCP服务。';
        } else if (type === 'sse') {
            hint = '<b>SSE：</b> 只需填写命令、参数、环境变量、工作目录。适用于远程SSE MCP服务。';
        } else {
            hint = '<b>streamableHTTP：</b> 只需填写命令、参数、环境变量、工作目录。适用于远程HTTP类MCP服务。';
        }
        $('#editTransportTypeHint').html(hint);
    });
    $('#editTransportType').trigger('change');
});

/**
 * 代理管理相关函数
 */

// 加载代理列表
function loadProxiesList() {
    console.log('开始加载 MCP 代理列表...');
    
    // 检查DOM元素是否存在
    const $proxiesList = $('#proxiesList');
    if (!$proxiesList.length) {
        console.error('代理列表容器 #proxiesList 不存在，DOM结构可能有问题');
        console.log('当前页面中的相关元素：');
        console.log('  #proxiesTab 存在:', $('#proxiesTab').length > 0);
        console.log('  #proxiesTable 存在:', $('#proxiesTable').length > 0);
        console.log('  #proxiesList 存在:', $('#proxiesList').length > 0);
        return;
    }
    
    // 清空代理列表并显示加载状态
    console.log('设置代理列表加载状态...');
    $proxiesList.html(`
        <tr>
            <td colspan="7" class="text-center">
                <div class="py-3">
                    <div class="spinner-border text-primary mb-2" role="status">
                        <span class="visually-hidden">正在加载...</span>
                    </div>
                    <p class="mb-0">正在加载 MCP 代理列表...</p>
                </div>
            </td>
        </tr>
    `);
    
    // 请求代理列表数据 - 确保使用结尾斜杠
    console.log('发送AJAX请求到 /api/proxy/ 获取代理列表...');
    $.ajax({
        url: '/api/proxy/',  // 确保有结尾斜杠，避免重定向问题
        type: 'GET',
        cache: false,
        dataType: 'json',
        success: function(response) {
            console.log('获取到代理列表数据:', response);
            
            // 清空加载状态
            $proxiesList.empty();
            
            // 如果没有代理，显示空消息
            if (!response || !Array.isArray(response) || response.length === 0) {
                console.log('没有代理数据，显示空消息');
                $proxiesList.html(`
                    <tr>
                        <td colspan="7" class="text-center">
                            <div class="py-3">
                                <i class="fas fa-random text-muted mb-2" style="font-size: 2rem;"></i>
                                <p class="mb-0">暂无 MCP 代理，请点击右上角按钮添加</p>
                            </div>
                        </td>
                    </tr>
                `);
                return;
            }
            
            // 添加所有代理
            response.forEach(function(proxy) {
                const row = $('<tr>');
                
                // 名称列
                row.append($('<td>').text(proxy.name));
                
                // 源服务列
                row.append($('<td>').text(proxy.server_name));
                
                // 端点列
                row.append($('<td>').text(proxy.endpoint));
                
                // 类型列
                row.append($('<td>').text(proxy.transport_type));
                
                // 状态列
                let statusHtml = '';
                if (proxy.status === 'running') {
                    statusHtml = '<span class="badge bg-success">运行中</span>';
                    if (proxy.tools && proxy.tools.length > 0) {
                        statusHtml += ` <small>(${proxy.tools.length} 个工具)</small>`;
                    }
                } else if (proxy.status === 'error') {
                    statusHtml = '<span class="badge bg-danger">错误</span>';
                    if (proxy.error) {
                        statusHtml += ` <small class="text-danger">${proxy.error}</small>`;
                    }
                } else {
                    statusHtml = '<span class="badge bg-secondary">未启动</span>';
                }
                row.append($('<td>').html(statusHtml));
                
                // 工具列表列
                let toolsHtml = '';
                if (proxy.tools && proxy.tools.length > 0) {
                    const modalId = `proxyToolsModal_${proxy.name.replace(/[^a-zA-Z0-9]/g, '')}`;
                    
                    toolsHtml += `
                        <button class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#${modalId}">
                            <i class="fas fa-tools"></i> 查看 ${proxy.tools.length} 个工具
                        </button>
                        
                        <div class="modal fade" id="${modalId}" tabindex="-1" aria-hidden="true">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">代理 ${proxy.name} 工具列表</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="table-responsive">
                                            <table class="table table-sm table-striped">
                                                <thead>
                                                    <tr>
                                                        <th>名称</th>
                                                        <th>描述</th>
                                                    </tr>
                                                </thead>
                                                <tbody>`;
                    
                    proxy.tools.forEach(function(tool) {
                        toolsHtml += `
                            <tr>
                                <td>${tool.name || ''}</td>
                                <td>${tool.description || ''}</td>
                            </tr>
                        `;
                    });
                    
                    toolsHtml += `
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                }
                
                // 如果代理状态为运行中，添加更新工具列表按钮
                if (proxy.status === 'running') {
                    toolsHtml += `
                        <button class="btn btn-sm btn-outline-primary update-proxy-tools-btn ms-1" data-proxy="${proxy.name}">
                            <i class="fas fa-sync-alt"></i> 更新工具列表
                        </button>
                    `;
                }
                
                row.append($('<td>').html(toolsHtml));
                
                // 操作列
                let actionsHtml = '';
                
                // 编辑按钮
                actionsHtml += `
                    <button class="btn btn-sm btn-outline-primary edit-proxy-btn" data-proxy="${proxy.name}">
                        <i class="fas fa-edit"></i> 编辑
                    </button>
                `;
                
                // 删除按钮
                actionsHtml += `
                    <button class="btn btn-sm btn-outline-danger delete-proxy-btn ms-1" data-proxy="${proxy.name}">
                        <i class="fas fa-trash"></i> 删除
                    </button>
                `;
                
                row.append($('<td>').html(actionsHtml));
                
                // 将行添加到列表
                $proxiesList.append(row);
            });
        },
        error: function(xhr, status, error) {
            console.error('获取代理列表失败:', xhr.responseText, status, error);
            console.error('状态码:', xhr.status);
            console.error('Response头:', xhr.getAllResponseHeaders());
            
            // 如果是重定向（307），尝试手动处理
            if (xhr.status === 307) {
                console.log('检测到重定向(307)，尝试使用重定向URL...');
                const redirectUrl = xhr.getResponseHeader('Location');
                if (redirectUrl) {
                    console.log('重定向到:', redirectUrl);
                    // 提取相对路径
                    const relativeUrl = redirectUrl.split('/').slice(3).join('/');
                    
                    $.ajax({
                        url: '/' + relativeUrl,
                        type: 'GET',
                        cache: false,
                        dataType: 'json',
                        success: function(data) {
                            console.log('重定向请求成功，获取到数据:', data);
                            // 重新加载代理列表
                            loadProxiesList();
                        },
                        error: function(innerXhr, innerStatus, innerError) {
                            console.error('重定向请求失败:', innerStatus, innerError);
                            showErrorMessage();
                        }
                    });
                    return;
                }
            }
            
            // 显示标准错误信息
            showErrorMessage();
            
            function showErrorMessage() {
                // 显示错误信息并添加刷新按钮
                $proxiesList.html(`
                    <tr>
                        <td colspan="7" class="text-center">
                            <div class="py-3">
                                <p class="text-danger mb-2">加载 MCP 代理列表失败: ${xhr.status} ${xhr.statusText}</p>
                                <p>错误详情: ${error}</p>
                                <button class="btn btn-sm btn-primary refresh-proxies-list-btn">
                                    <i class="fas fa-sync-alt me-1"></i>重新加载
                                </button>
                            </div>
                        </td>
                    </tr>
                `);
                
                // 为刷新按钮添加点击事件
                $('.refresh-proxies-list-btn').click(function() {
                    loadProxiesList();
                });
            }
        }
    });
}

// 添加代理表单保存按钮
$(document).on('click', '#saveProxyBtn', function() {
    // 禁用按钮，防止重复提交
    const $btn = $(this);
    const originalHtml = $btn.html();
    $btn.prop('disabled', true);
    $btn.html('<i class="fas fa-spinner fa-spin"></i> 保存中...');
    
    // 获取表单数据
    const formData = {
        name: $('#proxyName').val(),
        server_name: $('#proxyServerName').val(),
        endpoint: $('#proxyEndpoint').val(),
        transport_type: $('#proxyTransportType').val(),
        exposed_tools: $('#proxyExposedTools').val().split('\n').filter(Boolean).map(s => s.trim()),
        enable_aggregation: $('#proxyEnableAggregation').prop('checked')
    };
    
    // 简单验证
    if (!formData.name) {
        showToast('danger', '代理名称不能为空');
        $btn.prop('disabled', false);
        $btn.html(originalHtml);
        return;
    }
    if (!formData.server_name) {
        showToast('danger', '请选择源服务');
        $btn.prop('disabled', false);
        $btn.html(originalHtml);
        return;
    }
    
    console.log('添加代理请求数据:', formData);
    
    // 提交表单
    $.ajax({
        url: '/api/proxy/',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(formData),
        success: function(response) {
            // 恢复按钮状态
            $btn.prop('disabled', false);
            $btn.html(originalHtml);
            
            // 隐藏模态框
            const addProxyModal = bootstrap.Modal.getInstance(document.getElementById('addProxyModal'));
            addProxyModal.hide();
            
            // 显示成功消息并刷新列表
            showToast('success', response.message || '添加代理成功');
            loadProxiesList();
        },
        error: function(xhr, status, error) {
            // 恢复按钮状态
            $btn.prop('disabled', false);
            $btn.html(originalHtml);
            
            // 显示错误信息
            console.error('添加代理失败:', xhr.responseText);
            let errorMsg = '添加代理失败';
            if (xhr.responseJSON && xhr.responseJSON.detail) {
                errorMsg += ': ' + xhr.responseJSON.detail;
            } else {
                errorMsg += ': ' + error;
            }
            showToast('danger', errorMsg);
        }
    });
});

// 更新代理工具列表按钮点击事件
$(document).on('click', '.update-proxy-tools-btn', function() {
    const proxyName = $(this).data('proxy');
    const $btn = $(this);
    
    // 显示加载状态
    $btn.prop('disabled', true);
    $btn.html('<i class="fas fa-spinner fa-spin"></i>');
    
    // 调用更新工具列表API
    $.ajax({
        url: `/api/proxy/${proxyName}/update-tools`,
        type: 'POST',
        success: function(response) {
            showToast('success', `代理 ${proxyName} 工具列表更新成功，共 ${response.count} 个工具`);
            loadProxiesList();
        },
        error: function(xhr) {
            let errorMsg = `更新代理 ${proxyName} 工具列表失败`;
            if (xhr.responseJSON && xhr.responseJSON.detail) {
                errorMsg += ': ' + xhr.responseJSON.detail;
            }
            showToast('danger', errorMsg);
            
            // 恢复按钮状态
            $btn.prop('disabled', false);
            $btn.html('<i class="fas fa-sync-alt"></i> 更新工具列表');
        }
    });
});

// 编辑代理按钮点击事件
$(document).on('click', '.edit-proxy-btn', function() {
    const proxyName = $(this).data('proxy');
    const $btn = $(this);
    
    // 显示加载状态
    $btn.prop('disabled', true);
    const originalHtml = $btn.html();
    $btn.html('<i class="fas fa-spinner fa-spin"></i>');
    
    // 获取代理信息
    $.ajax({
        url: `/api/proxy/${proxyName}`,
        type: 'GET',
        success: function(proxy) {
            // 重置按钮状态
            $btn.prop('disabled', false);
            $btn.html(originalHtml);
            
            // 加载可用服务列表
            $.ajax({
                url: '/api/servers',
                type: 'GET',
                cache: false,
                dataType: 'json',
                success: function(servers) {
                    const $serverSelect = $('#editProxyServerName');
                    $serverSelect.empty();
                    
                    // 添加"请选择"选项
                    $serverSelect.append($('<option>').val('').text('请选择源服务...'));
                    
                    // 添加可用的服务
                    if (servers && Array.isArray(servers)) {
                        servers.forEach(function(server) {
                            const option = $('<option>')
                                .val(server.name)
                                .text(server.name);
                            $serverSelect.append(option);
                        });
                    }
                    
                    // 填充表单
                    $('#editProxyName').val(proxy.name);
                    $('#editProxyOriginalName').val(proxy.name);
                    $('#editProxyServerName').val(proxy.server_name);
                    $('#editProxyEndpoint').val(proxy.endpoint);
                    $('#editProxyTransportType').val(proxy.transport_type);
                    $('#editProxyExposedTools').val((proxy.exposed_tools || []).join('\n'));
                    $('#editProxyEnableAggregation').prop('checked', proxy.enable_aggregation);
                    
                    // 显示模态框
                    $('#editProxyModal').modal('show');
                },
                error: function(xhr) {
                    console.error('获取服务列表失败:', xhr.responseText);
                    showToast('danger', '获取可用服务列表失败，请刷新后重试');
                }
            });
        },
        error: function(xhr) {
            // 重置按钮状态
            $btn.prop('disabled', false);
            $btn.html(originalHtml);
            
            let errorMsg = `获取代理 ${proxyName} 信息失败`;
            if (xhr.responseJSON && xhr.responseJSON.detail) {
                errorMsg += ': ' + xhr.responseJSON.detail;
            }
            showToast('danger', errorMsg);
        }
    });
});

// 更新代理表单保存按钮
$(document).on('click', '#updateProxyBtn', function() {
    const originalName = $('#editProxyOriginalName').val();
    
    const formData = {
        name: $('#editProxyName').val(),
        server_name: $('#editProxyServerName').val(),
        endpoint: $('#editProxyEndpoint').val(),
        transport_type: $('#editProxyTransportType').val(),
        exposed_tools: $('#editProxyExposedTools').val().split('\n').filter(Boolean).map(s => s.trim()),
        enable_aggregation: $('#editProxyEnableAggregation').prop('checked')
    };
    
    // 简单验证
    if (!formData.name) {
        showToast('danger', '代理名称不能为空');
        return;
    }
    if (!formData.server_name) {
        showToast('danger', '请选择源服务');
        return;
    }
    
    // 提交表单
    $.ajax({
        url: `/api/proxy/${originalName}`,
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(formData),
        success: function(response) {
            $('#editProxyModal').modal('hide');
            showToast('success', response.message || '更新代理成功');
            loadProxiesList();
        },
        error: function(xhr) {
            let errorMsg = '更新代理失败';
            if (xhr.responseJSON && xhr.responseJSON.detail) {
                errorMsg += ': ' + xhr.responseJSON.detail;
            }
            showToast('danger', errorMsg);
        }
    });
});

// 删除代理按钮点击事件
$(document).on('click', '.delete-proxy-btn', function() {
    const proxyName = $(this).data('proxy');
    
    if (confirm(`确定要删除代理 "${proxyName}" 吗？`)) {
        $.ajax({
            url: `/api/proxy/${proxyName}`,
            type: 'DELETE',
            success: function(response) {
                showToast('success', response.message || `代理 ${proxyName} 删除成功`);
                loadProxiesList();
            },
            error: function(xhr) {
                let errorMsg = `删除代理 ${proxyName} 失败`;
                if (xhr.responseJSON && xhr.responseJSON.detail) {
                    errorMsg += ': ' + xhr.responseJSON.detail;
                }
                showToast('danger', errorMsg);
            }
        });
    }
});

// 刷新代理列表按钮点击事件
$(document).on('click', '.refresh-proxies-list-btn', function() {
    loadProxiesList();
});
